// LIBS
const chalk = require('chalk')
const h2o2 = require('h2o2')
const pathToRegexp = require('path-to-regexp')
const hapi = require('hapi')
const boom = require('boom')

const proxyMap = require('./proxy-map.json')
const config = require('./config.json')

const start = async () => {
try {
let server = hapi.server({
port: config.port,
host: 'localhost'
})
await server.register({plugin: h2o2})
const proxyHandler = {
proxy: {
mapUri: req => {
// console.log(req.path, req.method)
let uri
for (let p in proxyMap) {
if (pathToRegexp(p).exec(req.path)) {
if (
!proxyMap[p].methods ||
proxyMap[p].methods.indexOf(req.method.toUpperCase()) !== -1
) {
uri = proxyMap[p].uri + req.url.path
}
}
}
// console.log(req.path, uri)
if (!uri) {
throw boom.notFound()
}
return {uri, headers: req.headers, query: req.query}
},
onResponse: (err, res, req, reply, settings, ttl) => {
if (err) {
console.log(err)
return err
}
return res
}
}
}
server.route({method: '*', path: '/{all*}', handler: proxyHandler})

server.start()
console.log(chalk.green(`Server proxy running at: ${server.info.uri}`))
} catch (e) {
console.log(chalk.yellow(e.stack))
console.log(chalk.red.bold(`ERROR: ${e.message}`))
}
}

module.exports = {start}
