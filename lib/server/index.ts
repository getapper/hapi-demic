import fs from 'fs'import chalk from 'chalk'import path from 'path'import qs from 'qs'import hapi from '@hapi/hapi'import hapiInert from '@hapi/inert'import hapiVision from '@hapi/vision'import hapiSwagger from 'hapi-swagger'import hapiResponseHandler from 'root/plugins/response-handler'const build = async opts => {  const {    port,    host,  } = opts  let server = hapi.server({    port,    host,    routes: {      files: {        relativeTo: path.join(__dirname, '..', 'views')      }    },    query: {      parser: query => qs.parse(query)    }  })  // INERT  await server.register(hapiInert)  console.log(chalk.green('Inert loaded'))  // INERT DEFAULT VIEW PATH  server.route({    method: 'GET',    path: '/{param*}',    handler: {      directory: {        path: '.',        redirectToSlash: true,        index: true,      }    }  })  // VISION  await server.register(hapiVision)  console.log(chalk.green('Vision loaded'))  // SWAGGER  await server.register({    plugin: hapiSwagger,    options: {      "documentationPath": "/docs",    }  })  console.log(chalk.green('Swagger loaded'))  // RESPONSE HANDLER  await server.register({    plugin: hapiResponseHandler  })  console.log(chalk.green('Hapi Response Handler loaded'))  // App API  // server.route(routes())  console.log(chalk.green('Routes loaded'))  return server}/* $lab:coverage:off$ */const start = async () => {  try {    const server = await build({      host: 'localhost'    })    await server.start()    console.log(      chalk.green.bold(        `Open this URL to access the configurator: ${          server.info.uri        }`      )    )  } catch (e) {    console.log(chalk.yellow(e.stack))    console.log(chalk.red.bold(`ERROR: ${e.message}`))    e.managed = true    throw e  }}/* $lab:coverage:on$ */export default start